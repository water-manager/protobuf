//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: api.proto

package dev.igorxp5.proto.api;

@kotlin.jvm.JvmSynthetic
public inline fun waterTankState(block: dev.igorxp5.proto.api.WaterTankStateKt.Dsl.() -> kotlin.Unit): dev.igorxp5.proto.api.WaterTankState =
  dev.igorxp5.proto.api.WaterTankStateKt.Dsl._create(dev.igorxp5.proto.api.WaterTankState.newBuilder()).apply { block() }._build()
public object WaterTankStateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: dev.igorxp5.proto.api.WaterTankState.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: dev.igorxp5.proto.api.WaterTankState.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): dev.igorxp5.proto.api.WaterTankState = _builder.build()

    /**
     * <code>string name = 1;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 1;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>uint32 pressureSensorPin = 2;</code>
     */
    public var pressureSensorPin: kotlin.Int
      @JvmName("getPressureSensorPin")
      get() = _builder.getPressureSensorPin()
      @JvmName("setPressureSensorPin")
      set(value) {
        _builder.setPressureSensorPin(value)
      }
    /**
     * <code>uint32 pressureSensorPin = 2;</code>
     */
    public fun clearPressureSensorPin() {
      _builder.clearPressureSensorPin()
    }

    /**
     * <code>bool filling = 3;</code>
     */
    public var filling: kotlin.Boolean
      @JvmName("getFilling")
      get() = _builder.getFilling()
      @JvmName("setFilling")
      set(value) {
        _builder.setFilling(value)
      }
    /**
     * <code>bool filling = 3;</code>
     */
    public fun clearFilling() {
      _builder.clearFilling()
    }

    /**
     * <code>bool active = 4;</code>
     */
    public var active: kotlin.Boolean
      @JvmName("getActive")
      get() = _builder.getActive()
      @JvmName("setActive")
      set(value) {
        _builder.setActive(value)
      }
    /**
     * <code>bool active = 4;</code>
     */
    public fun clearActive() {
      _builder.clearActive()
    }

    /**
     * <code>float volumeFactor = 5;</code>
     */
    public var volumeFactor: kotlin.Float
      @JvmName("getVolumeFactor")
      get() = _builder.getVolumeFactor()
      @JvmName("setVolumeFactor")
      set(value) {
        _builder.setVolumeFactor(value)
      }
    /**
     * <code>float volumeFactor = 5;</code>
     */
    public fun clearVolumeFactor() {
      _builder.clearVolumeFactor()
    }

    /**
     * <code>float pressureFactor = 6;</code>
     */
    public var pressureFactor: kotlin.Float
      @JvmName("getPressureFactor")
      get() = _builder.getPressureFactor()
      @JvmName("setPressureFactor")
      set(value) {
        _builder.setPressureFactor(value)
      }
    /**
     * <code>float pressureFactor = 6;</code>
     */
    public fun clearPressureFactor() {
      _builder.clearPressureFactor()
    }

    /**
     * <code>float minimumVolume = 7;</code>
     */
    public var minimumVolume: kotlin.Float
      @JvmName("getMinimumVolume")
      get() = _builder.getMinimumVolume()
      @JvmName("setMinimumVolume")
      set(value) {
        _builder.setMinimumVolume(value)
      }
    /**
     * <code>float minimumVolume = 7;</code>
     */
    public fun clearMinimumVolume() {
      _builder.clearMinimumVolume()
    }

    /**
     * <code>float maxVolume = 8;</code>
     */
    public var maxVolume: kotlin.Float
      @JvmName("getMaxVolume")
      get() = _builder.getMaxVolume()
      @JvmName("setMaxVolume")
      set(value) {
        _builder.setMaxVolume(value)
      }
    /**
     * <code>float maxVolume = 8;</code>
     */
    public fun clearMaxVolume() {
      _builder.clearMaxVolume()
    }

    /**
     * <code>float zeroVolumePressure = 9;</code>
     */
    public var zeroVolumePressure: kotlin.Float
      @JvmName("getZeroVolumePressure")
      get() = _builder.getZeroVolumePressure()
      @JvmName("setZeroVolumePressure")
      set(value) {
        _builder.setZeroVolumePressure(value)
      }
    /**
     * <code>float zeroVolumePressure = 9;</code>
     */
    public fun clearZeroVolumePressure() {
      _builder.clearZeroVolumePressure()
    }

    /**
     * <code>float pressureChangingValue = 10;</code>
     */
    public var pressureChangingValue: kotlin.Float
      @JvmName("getPressureChangingValue")
      get() = _builder.getPressureChangingValue()
      @JvmName("setPressureChangingValue")
      set(value) {
        _builder.setPressureChangingValue(value)
      }
    /**
     * <code>float pressureChangingValue = 10;</code>
     */
    public fun clearPressureChangingValue() {
      _builder.clearPressureChangingValue()
    }

    /**
     * <code>uint32 rawPressureValue = 11;</code>
     */
    public var rawPressureValue: kotlin.Int
      @JvmName("getRawPressureValue")
      get() = _builder.getRawPressureValue()
      @JvmName("setRawPressureValue")
      set(value) {
        _builder.setRawPressureValue(value)
      }
    /**
     * <code>uint32 rawPressureValue = 11;</code>
     */
    public fun clearRawPressureValue() {
      _builder.clearRawPressureValue()
    }

    /**
     * <code>float pressure = 12;</code>
     */
    public var pressure: kotlin.Float
      @JvmName("getPressure")
      get() = _builder.getPressure()
      @JvmName("setPressure")
      set(value) {
        _builder.setPressure(value)
      }
    /**
     * <code>float pressure = 12;</code>
     */
    public fun clearPressure() {
      _builder.clearPressure()
    }

    /**
     * <code>float volume = 13;</code>
     */
    public var volume: kotlin.Float
      @JvmName("getVolume")
      get() = _builder.getVolume()
      @JvmName("setVolume")
      set(value) {
        _builder.setVolume(value)
      }
    /**
     * <code>float volume = 13;</code>
     */
    public fun clearVolume() {
      _builder.clearVolume()
    }

    /**
     * <code>optional string waterSource = 14;</code>
     */
    public var waterSource: kotlin.String
      @JvmName("getWaterSource")
      get() = _builder.getWaterSource()
      @JvmName("setWaterSource")
      set(value) {
        _builder.setWaterSource(value)
      }
    /**
     * <code>optional string waterSource = 14;</code>
     */
    public fun clearWaterSource() {
      _builder.clearWaterSource()
    }
    /**
     * <code>optional string waterSource = 14;</code>
     * @return Whether the waterSource field is set.
     */
    public fun hasWaterSource(): kotlin.Boolean {
      return _builder.hasWaterSource()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun dev.igorxp5.proto.api.WaterTankState.copy(block: dev.igorxp5.proto.api.WaterTankStateKt.Dsl.() -> kotlin.Unit): dev.igorxp5.proto.api.WaterTankState =
  dev.igorxp5.proto.api.WaterTankStateKt.Dsl._create(this.toBuilder()).apply { block() }._build()
