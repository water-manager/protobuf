// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

package dev.igorxp5.proto.api;

/**
 * Protobuf type {@code WaterTankState}
 */
public final class WaterTankState extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:WaterTankState)
    WaterTankStateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use WaterTankState.newBuilder() to construct.
  private WaterTankState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WaterTankState() {
    name_ = "";
    waterSource_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new WaterTankState();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private WaterTankState(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 16: {

            pressureSensorPin_ = input.readUInt32();
            break;
          }
          case 24: {

            filling_ = input.readBool();
            break;
          }
          case 32: {

            active_ = input.readBool();
            break;
          }
          case 45: {

            volumeFactor_ = input.readFloat();
            break;
          }
          case 53: {

            pressureFactor_ = input.readFloat();
            break;
          }
          case 61: {

            minimumVolume_ = input.readFloat();
            break;
          }
          case 69: {

            maxVolume_ = input.readFloat();
            break;
          }
          case 77: {

            zeroVolumePressure_ = input.readFloat();
            break;
          }
          case 85: {

            pressureChangingValue_ = input.readFloat();
            break;
          }
          case 88: {

            rawPressureValue_ = input.readUInt32();
            break;
          }
          case 101: {

            pressure_ = input.readFloat();
            break;
          }
          case 109: {

            volume_ = input.readFloat();
            break;
          }
          case 114: {
            java.lang.String s = input.readStringRequireUtf8();
            bitField0_ |= 0x00000001;
            waterSource_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return dev.igorxp5.proto.api.Api.internal_static_WaterTankState_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return dev.igorxp5.proto.api.Api.internal_static_WaterTankState_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            dev.igorxp5.proto.api.WaterTankState.class, dev.igorxp5.proto.api.WaterTankState.Builder.class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PRESSURESENSORPIN_FIELD_NUMBER = 2;
  private int pressureSensorPin_;
  /**
   * <code>uint32 pressureSensorPin = 2;</code>
   * @return The pressureSensorPin.
   */
  @java.lang.Override
  public int getPressureSensorPin() {
    return pressureSensorPin_;
  }

  public static final int FILLING_FIELD_NUMBER = 3;
  private boolean filling_;
  /**
   * <code>bool filling = 3;</code>
   * @return The filling.
   */
  @java.lang.Override
  public boolean getFilling() {
    return filling_;
  }

  public static final int ACTIVE_FIELD_NUMBER = 4;
  private boolean active_;
  /**
   * <code>bool active = 4;</code>
   * @return The active.
   */
  @java.lang.Override
  public boolean getActive() {
    return active_;
  }

  public static final int VOLUMEFACTOR_FIELD_NUMBER = 5;
  private float volumeFactor_;
  /**
   * <code>float volumeFactor = 5;</code>
   * @return The volumeFactor.
   */
  @java.lang.Override
  public float getVolumeFactor() {
    return volumeFactor_;
  }

  public static final int PRESSUREFACTOR_FIELD_NUMBER = 6;
  private float pressureFactor_;
  /**
   * <code>float pressureFactor = 6;</code>
   * @return The pressureFactor.
   */
  @java.lang.Override
  public float getPressureFactor() {
    return pressureFactor_;
  }

  public static final int MINIMUMVOLUME_FIELD_NUMBER = 7;
  private float minimumVolume_;
  /**
   * <code>float minimumVolume = 7;</code>
   * @return The minimumVolume.
   */
  @java.lang.Override
  public float getMinimumVolume() {
    return minimumVolume_;
  }

  public static final int MAXVOLUME_FIELD_NUMBER = 8;
  private float maxVolume_;
  /**
   * <code>float maxVolume = 8;</code>
   * @return The maxVolume.
   */
  @java.lang.Override
  public float getMaxVolume() {
    return maxVolume_;
  }

  public static final int ZEROVOLUMEPRESSURE_FIELD_NUMBER = 9;
  private float zeroVolumePressure_;
  /**
   * <code>float zeroVolumePressure = 9;</code>
   * @return The zeroVolumePressure.
   */
  @java.lang.Override
  public float getZeroVolumePressure() {
    return zeroVolumePressure_;
  }

  public static final int PRESSURECHANGINGVALUE_FIELD_NUMBER = 10;
  private float pressureChangingValue_;
  /**
   * <code>float pressureChangingValue = 10;</code>
   * @return The pressureChangingValue.
   */
  @java.lang.Override
  public float getPressureChangingValue() {
    return pressureChangingValue_;
  }

  public static final int RAWPRESSUREVALUE_FIELD_NUMBER = 11;
  private int rawPressureValue_;
  /**
   * <code>uint32 rawPressureValue = 11;</code>
   * @return The rawPressureValue.
   */
  @java.lang.Override
  public int getRawPressureValue() {
    return rawPressureValue_;
  }

  public static final int PRESSURE_FIELD_NUMBER = 12;
  private float pressure_;
  /**
   * <code>float pressure = 12;</code>
   * @return The pressure.
   */
  @java.lang.Override
  public float getPressure() {
    return pressure_;
  }

  public static final int VOLUME_FIELD_NUMBER = 13;
  private float volume_;
  /**
   * <code>float volume = 13;</code>
   * @return The volume.
   */
  @java.lang.Override
  public float getVolume() {
    return volume_;
  }

  public static final int WATERSOURCE_FIELD_NUMBER = 14;
  private volatile java.lang.Object waterSource_;
  /**
   * <code>optional string waterSource = 14;</code>
   * @return Whether the waterSource field is set.
   */
  @java.lang.Override
  public boolean hasWaterSource() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>optional string waterSource = 14;</code>
   * @return The waterSource.
   */
  @java.lang.Override
  public java.lang.String getWaterSource() {
    java.lang.Object ref = waterSource_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      waterSource_ = s;
      return s;
    }
  }
  /**
   * <code>optional string waterSource = 14;</code>
   * @return The bytes for waterSource.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getWaterSourceBytes() {
    java.lang.Object ref = waterSource_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      waterSource_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (pressureSensorPin_ != 0) {
      output.writeUInt32(2, pressureSensorPin_);
    }
    if (filling_ != false) {
      output.writeBool(3, filling_);
    }
    if (active_ != false) {
      output.writeBool(4, active_);
    }
    if (java.lang.Float.floatToRawIntBits(volumeFactor_) != 0) {
      output.writeFloat(5, volumeFactor_);
    }
    if (java.lang.Float.floatToRawIntBits(pressureFactor_) != 0) {
      output.writeFloat(6, pressureFactor_);
    }
    if (java.lang.Float.floatToRawIntBits(minimumVolume_) != 0) {
      output.writeFloat(7, minimumVolume_);
    }
    if (java.lang.Float.floatToRawIntBits(maxVolume_) != 0) {
      output.writeFloat(8, maxVolume_);
    }
    if (java.lang.Float.floatToRawIntBits(zeroVolumePressure_) != 0) {
      output.writeFloat(9, zeroVolumePressure_);
    }
    if (java.lang.Float.floatToRawIntBits(pressureChangingValue_) != 0) {
      output.writeFloat(10, pressureChangingValue_);
    }
    if (rawPressureValue_ != 0) {
      output.writeUInt32(11, rawPressureValue_);
    }
    if (java.lang.Float.floatToRawIntBits(pressure_) != 0) {
      output.writeFloat(12, pressure_);
    }
    if (java.lang.Float.floatToRawIntBits(volume_) != 0) {
      output.writeFloat(13, volume_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 14, waterSource_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (pressureSensorPin_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, pressureSensorPin_);
    }
    if (filling_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, filling_);
    }
    if (active_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, active_);
    }
    if (java.lang.Float.floatToRawIntBits(volumeFactor_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(5, volumeFactor_);
    }
    if (java.lang.Float.floatToRawIntBits(pressureFactor_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, pressureFactor_);
    }
    if (java.lang.Float.floatToRawIntBits(minimumVolume_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, minimumVolume_);
    }
    if (java.lang.Float.floatToRawIntBits(maxVolume_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(8, maxVolume_);
    }
    if (java.lang.Float.floatToRawIntBits(zeroVolumePressure_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(9, zeroVolumePressure_);
    }
    if (java.lang.Float.floatToRawIntBits(pressureChangingValue_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(10, pressureChangingValue_);
    }
    if (rawPressureValue_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(11, rawPressureValue_);
    }
    if (java.lang.Float.floatToRawIntBits(pressure_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(12, pressure_);
    }
    if (java.lang.Float.floatToRawIntBits(volume_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(13, volume_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, waterSource_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof dev.igorxp5.proto.api.WaterTankState)) {
      return super.equals(obj);
    }
    dev.igorxp5.proto.api.WaterTankState other = (dev.igorxp5.proto.api.WaterTankState) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (getPressureSensorPin()
        != other.getPressureSensorPin()) return false;
    if (getFilling()
        != other.getFilling()) return false;
    if (getActive()
        != other.getActive()) return false;
    if (java.lang.Float.floatToIntBits(getVolumeFactor())
        != java.lang.Float.floatToIntBits(
            other.getVolumeFactor())) return false;
    if (java.lang.Float.floatToIntBits(getPressureFactor())
        != java.lang.Float.floatToIntBits(
            other.getPressureFactor())) return false;
    if (java.lang.Float.floatToIntBits(getMinimumVolume())
        != java.lang.Float.floatToIntBits(
            other.getMinimumVolume())) return false;
    if (java.lang.Float.floatToIntBits(getMaxVolume())
        != java.lang.Float.floatToIntBits(
            other.getMaxVolume())) return false;
    if (java.lang.Float.floatToIntBits(getZeroVolumePressure())
        != java.lang.Float.floatToIntBits(
            other.getZeroVolumePressure())) return false;
    if (java.lang.Float.floatToIntBits(getPressureChangingValue())
        != java.lang.Float.floatToIntBits(
            other.getPressureChangingValue())) return false;
    if (getRawPressureValue()
        != other.getRawPressureValue()) return false;
    if (java.lang.Float.floatToIntBits(getPressure())
        != java.lang.Float.floatToIntBits(
            other.getPressure())) return false;
    if (java.lang.Float.floatToIntBits(getVolume())
        != java.lang.Float.floatToIntBits(
            other.getVolume())) return false;
    if (hasWaterSource() != other.hasWaterSource()) return false;
    if (hasWaterSource()) {
      if (!getWaterSource()
          .equals(other.getWaterSource())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + PRESSURESENSORPIN_FIELD_NUMBER;
    hash = (53 * hash) + getPressureSensorPin();
    hash = (37 * hash) + FILLING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getFilling());
    hash = (37 * hash) + ACTIVE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getActive());
    hash = (37 * hash) + VOLUMEFACTOR_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getVolumeFactor());
    hash = (37 * hash) + PRESSUREFACTOR_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getPressureFactor());
    hash = (37 * hash) + MINIMUMVOLUME_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getMinimumVolume());
    hash = (37 * hash) + MAXVOLUME_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getMaxVolume());
    hash = (37 * hash) + ZEROVOLUMEPRESSURE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getZeroVolumePressure());
    hash = (37 * hash) + PRESSURECHANGINGVALUE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getPressureChangingValue());
    hash = (37 * hash) + RAWPRESSUREVALUE_FIELD_NUMBER;
    hash = (53 * hash) + getRawPressureValue();
    hash = (37 * hash) + PRESSURE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getPressure());
    hash = (37 * hash) + VOLUME_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getVolume());
    if (hasWaterSource()) {
      hash = (37 * hash) + WATERSOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getWaterSource().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static dev.igorxp5.proto.api.WaterTankState parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static dev.igorxp5.proto.api.WaterTankState parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(dev.igorxp5.proto.api.WaterTankState prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code WaterTankState}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:WaterTankState)
      dev.igorxp5.proto.api.WaterTankStateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.igorxp5.proto.api.Api.internal_static_WaterTankState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.igorxp5.proto.api.Api.internal_static_WaterTankState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.igorxp5.proto.api.WaterTankState.class, dev.igorxp5.proto.api.WaterTankState.Builder.class);
    }

    // Construct using dev.igorxp5.proto.api.WaterTankState.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      pressureSensorPin_ = 0;

      filling_ = false;

      active_ = false;

      volumeFactor_ = 0F;

      pressureFactor_ = 0F;

      minimumVolume_ = 0F;

      maxVolume_ = 0F;

      zeroVolumePressure_ = 0F;

      pressureChangingValue_ = 0F;

      rawPressureValue_ = 0;

      pressure_ = 0F;

      volume_ = 0F;

      waterSource_ = "";
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return dev.igorxp5.proto.api.Api.internal_static_WaterTankState_descriptor;
    }

    @java.lang.Override
    public dev.igorxp5.proto.api.WaterTankState getDefaultInstanceForType() {
      return dev.igorxp5.proto.api.WaterTankState.getDefaultInstance();
    }

    @java.lang.Override
    public dev.igorxp5.proto.api.WaterTankState build() {
      dev.igorxp5.proto.api.WaterTankState result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public dev.igorxp5.proto.api.WaterTankState buildPartial() {
      dev.igorxp5.proto.api.WaterTankState result = new dev.igorxp5.proto.api.WaterTankState(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.name_ = name_;
      result.pressureSensorPin_ = pressureSensorPin_;
      result.filling_ = filling_;
      result.active_ = active_;
      result.volumeFactor_ = volumeFactor_;
      result.pressureFactor_ = pressureFactor_;
      result.minimumVolume_ = minimumVolume_;
      result.maxVolume_ = maxVolume_;
      result.zeroVolumePressure_ = zeroVolumePressure_;
      result.pressureChangingValue_ = pressureChangingValue_;
      result.rawPressureValue_ = rawPressureValue_;
      result.pressure_ = pressure_;
      result.volume_ = volume_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        to_bitField0_ |= 0x00000001;
      }
      result.waterSource_ = waterSource_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof dev.igorxp5.proto.api.WaterTankState) {
        return mergeFrom((dev.igorxp5.proto.api.WaterTankState)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(dev.igorxp5.proto.api.WaterTankState other) {
      if (other == dev.igorxp5.proto.api.WaterTankState.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (other.getPressureSensorPin() != 0) {
        setPressureSensorPin(other.getPressureSensorPin());
      }
      if (other.getFilling() != false) {
        setFilling(other.getFilling());
      }
      if (other.getActive() != false) {
        setActive(other.getActive());
      }
      if (other.getVolumeFactor() != 0F) {
        setVolumeFactor(other.getVolumeFactor());
      }
      if (other.getPressureFactor() != 0F) {
        setPressureFactor(other.getPressureFactor());
      }
      if (other.getMinimumVolume() != 0F) {
        setMinimumVolume(other.getMinimumVolume());
      }
      if (other.getMaxVolume() != 0F) {
        setMaxVolume(other.getMaxVolume());
      }
      if (other.getZeroVolumePressure() != 0F) {
        setZeroVolumePressure(other.getZeroVolumePressure());
      }
      if (other.getPressureChangingValue() != 0F) {
        setPressureChangingValue(other.getPressureChangingValue());
      }
      if (other.getRawPressureValue() != 0) {
        setRawPressureValue(other.getRawPressureValue());
      }
      if (other.getPressure() != 0F) {
        setPressure(other.getPressure());
      }
      if (other.getVolume() != 0F) {
        setVolume(other.getVolume());
      }
      if (other.hasWaterSource()) {
        bitField0_ |= 0x00000001;
        waterSource_ = other.waterSource_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      dev.igorxp5.proto.api.WaterTankState parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (dev.igorxp5.proto.api.WaterTankState) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <code>string name = 1;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private int pressureSensorPin_ ;
    /**
     * <code>uint32 pressureSensorPin = 2;</code>
     * @return The pressureSensorPin.
     */
    @java.lang.Override
    public int getPressureSensorPin() {
      return pressureSensorPin_;
    }
    /**
     * <code>uint32 pressureSensorPin = 2;</code>
     * @param value The pressureSensorPin to set.
     * @return This builder for chaining.
     */
    public Builder setPressureSensorPin(int value) {
      
      pressureSensorPin_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 pressureSensorPin = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressureSensorPin() {
      
      pressureSensorPin_ = 0;
      onChanged();
      return this;
    }

    private boolean filling_ ;
    /**
     * <code>bool filling = 3;</code>
     * @return The filling.
     */
    @java.lang.Override
    public boolean getFilling() {
      return filling_;
    }
    /**
     * <code>bool filling = 3;</code>
     * @param value The filling to set.
     * @return This builder for chaining.
     */
    public Builder setFilling(boolean value) {
      
      filling_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool filling = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearFilling() {
      
      filling_ = false;
      onChanged();
      return this;
    }

    private boolean active_ ;
    /**
     * <code>bool active = 4;</code>
     * @return The active.
     */
    @java.lang.Override
    public boolean getActive() {
      return active_;
    }
    /**
     * <code>bool active = 4;</code>
     * @param value The active to set.
     * @return This builder for chaining.
     */
    public Builder setActive(boolean value) {
      
      active_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool active = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearActive() {
      
      active_ = false;
      onChanged();
      return this;
    }

    private float volumeFactor_ ;
    /**
     * <code>float volumeFactor = 5;</code>
     * @return The volumeFactor.
     */
    @java.lang.Override
    public float getVolumeFactor() {
      return volumeFactor_;
    }
    /**
     * <code>float volumeFactor = 5;</code>
     * @param value The volumeFactor to set.
     * @return This builder for chaining.
     */
    public Builder setVolumeFactor(float value) {
      
      volumeFactor_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float volumeFactor = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearVolumeFactor() {
      
      volumeFactor_ = 0F;
      onChanged();
      return this;
    }

    private float pressureFactor_ ;
    /**
     * <code>float pressureFactor = 6;</code>
     * @return The pressureFactor.
     */
    @java.lang.Override
    public float getPressureFactor() {
      return pressureFactor_;
    }
    /**
     * <code>float pressureFactor = 6;</code>
     * @param value The pressureFactor to set.
     * @return This builder for chaining.
     */
    public Builder setPressureFactor(float value) {
      
      pressureFactor_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float pressureFactor = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressureFactor() {
      
      pressureFactor_ = 0F;
      onChanged();
      return this;
    }

    private float minimumVolume_ ;
    /**
     * <code>float minimumVolume = 7;</code>
     * @return The minimumVolume.
     */
    @java.lang.Override
    public float getMinimumVolume() {
      return minimumVolume_;
    }
    /**
     * <code>float minimumVolume = 7;</code>
     * @param value The minimumVolume to set.
     * @return This builder for chaining.
     */
    public Builder setMinimumVolume(float value) {
      
      minimumVolume_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float minimumVolume = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinimumVolume() {
      
      minimumVolume_ = 0F;
      onChanged();
      return this;
    }

    private float maxVolume_ ;
    /**
     * <code>float maxVolume = 8;</code>
     * @return The maxVolume.
     */
    @java.lang.Override
    public float getMaxVolume() {
      return maxVolume_;
    }
    /**
     * <code>float maxVolume = 8;</code>
     * @param value The maxVolume to set.
     * @return This builder for chaining.
     */
    public Builder setMaxVolume(float value) {
      
      maxVolume_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float maxVolume = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxVolume() {
      
      maxVolume_ = 0F;
      onChanged();
      return this;
    }

    private float zeroVolumePressure_ ;
    /**
     * <code>float zeroVolumePressure = 9;</code>
     * @return The zeroVolumePressure.
     */
    @java.lang.Override
    public float getZeroVolumePressure() {
      return zeroVolumePressure_;
    }
    /**
     * <code>float zeroVolumePressure = 9;</code>
     * @param value The zeroVolumePressure to set.
     * @return This builder for chaining.
     */
    public Builder setZeroVolumePressure(float value) {
      
      zeroVolumePressure_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float zeroVolumePressure = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearZeroVolumePressure() {
      
      zeroVolumePressure_ = 0F;
      onChanged();
      return this;
    }

    private float pressureChangingValue_ ;
    /**
     * <code>float pressureChangingValue = 10;</code>
     * @return The pressureChangingValue.
     */
    @java.lang.Override
    public float getPressureChangingValue() {
      return pressureChangingValue_;
    }
    /**
     * <code>float pressureChangingValue = 10;</code>
     * @param value The pressureChangingValue to set.
     * @return This builder for chaining.
     */
    public Builder setPressureChangingValue(float value) {
      
      pressureChangingValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float pressureChangingValue = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressureChangingValue() {
      
      pressureChangingValue_ = 0F;
      onChanged();
      return this;
    }

    private int rawPressureValue_ ;
    /**
     * <code>uint32 rawPressureValue = 11;</code>
     * @return The rawPressureValue.
     */
    @java.lang.Override
    public int getRawPressureValue() {
      return rawPressureValue_;
    }
    /**
     * <code>uint32 rawPressureValue = 11;</code>
     * @param value The rawPressureValue to set.
     * @return This builder for chaining.
     */
    public Builder setRawPressureValue(int value) {
      
      rawPressureValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 rawPressureValue = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearRawPressureValue() {
      
      rawPressureValue_ = 0;
      onChanged();
      return this;
    }

    private float pressure_ ;
    /**
     * <code>float pressure = 12;</code>
     * @return The pressure.
     */
    @java.lang.Override
    public float getPressure() {
      return pressure_;
    }
    /**
     * <code>float pressure = 12;</code>
     * @param value The pressure to set.
     * @return This builder for chaining.
     */
    public Builder setPressure(float value) {
      
      pressure_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float pressure = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearPressure() {
      
      pressure_ = 0F;
      onChanged();
      return this;
    }

    private float volume_ ;
    /**
     * <code>float volume = 13;</code>
     * @return The volume.
     */
    @java.lang.Override
    public float getVolume() {
      return volume_;
    }
    /**
     * <code>float volume = 13;</code>
     * @param value The volume to set.
     * @return This builder for chaining.
     */
    public Builder setVolume(float value) {
      
      volume_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float volume = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearVolume() {
      
      volume_ = 0F;
      onChanged();
      return this;
    }

    private java.lang.Object waterSource_ = "";
    /**
     * <code>optional string waterSource = 14;</code>
     * @return Whether the waterSource field is set.
     */
    public boolean hasWaterSource() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional string waterSource = 14;</code>
     * @return The waterSource.
     */
    public java.lang.String getWaterSource() {
      java.lang.Object ref = waterSource_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        waterSource_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string waterSource = 14;</code>
     * @return The bytes for waterSource.
     */
    public com.google.protobuf.ByteString
        getWaterSourceBytes() {
      java.lang.Object ref = waterSource_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        waterSource_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string waterSource = 14;</code>
     * @param value The waterSource to set.
     * @return This builder for chaining.
     */
    public Builder setWaterSource(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      waterSource_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string waterSource = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearWaterSource() {
      bitField0_ = (bitField0_ & ~0x00000001);
      waterSource_ = getDefaultInstance().getWaterSource();
      onChanged();
      return this;
    }
    /**
     * <code>optional string waterSource = 14;</code>
     * @param value The bytes for waterSource to set.
     * @return This builder for chaining.
     */
    public Builder setWaterSourceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      bitField0_ |= 0x00000001;
      waterSource_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:WaterTankState)
  }

  // @@protoc_insertion_point(class_scope:WaterTankState)
  private static final dev.igorxp5.proto.api.WaterTankState DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new dev.igorxp5.proto.api.WaterTankState();
  }

  public static dev.igorxp5.proto.api.WaterTankState getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WaterTankState>
      PARSER = new com.google.protobuf.AbstractParser<WaterTankState>() {
    @java.lang.Override
    public WaterTankState parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new WaterTankState(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<WaterTankState> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WaterTankState> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public dev.igorxp5.proto.api.WaterTankState getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

